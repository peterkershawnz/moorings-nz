openapi: 3.1.0
info:
  title: Moorings API
  version: "1.0"
  contact:
    name: Peter Kershaw
    email: p.kershaw4@gmail.com
  description: Moorings and marina berths marketplace API.
servers:
  - url: "http://localhost:3000/api"
paths:
  /moorings:
    get:
      summary: Get moorings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mooring"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-moorings
      description: Returns moorings based on location.
      parameters:
        - schema:
            type: string
          in: query
          name: from
          description: "date from "
        - schema:
            type: number
          in: query
          name: to
          description: date to
        - schema:
            type: number
          in: query
          name: lat
          description: send the users current location
        - schema:
            type: number
          in: query
          name: lng
          description: send the users current location
      tags:
        - mooring
  "/moorings/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a single mooring
      tags:
        - mooring
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mooring"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-moorings-id
      description: Returns a individual mooring based on id.
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: mooring id
    patch:
      summary: Update mooring record
      operationId: patch-moorings-id
      responses:
        "200":
          description: 200 Mooring updated
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          description: 403 Forbidden
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Update a single mooring.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Mooring"
      parameters: []
      tags:
        - mooring
  /owners:
    post:
      summary: Create a owner
      operationId: post-owners
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"
        "400":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      description: Create a new owner record
      tags:
        - owner
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Owner"
  "/owners/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a single owner
      tags:
        - owner
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"
        "400":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-owners-id
      description: Returns an individual mooring and marina berth owner based on id.
    patch:
      summary: Update owner record
      operationId: patch-owners-id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Update a single owner record
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Owner"
        description: ""
      tags:
        - owner
    delete:
      summary: Delete a owner
      operationId: delete-owners-id
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Removes a owner record
      tags:
        - owner
  /bookings:
    post:
      summary: Create a booking
      operationId: post-bookings
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/booking"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      description: Creates a booking of a mooring
      tags:
        - booking
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/booking"
  "/bookings/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a booking
      tags:
        - booking
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/booking"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-bookings-id
      description: Return the bookings for a single mooring
    delete:
      summary: Delete a booking
      operationId: delete-bookings-id
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Deletes a mooring booking
      tags:
        - booking
      parameters: []
  /users:
    post:
      summary: Create a user
      operationId: post-users
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - user
      description: Creates a new user record
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
  "/users/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a user
      tags:
        - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-users-id
      description: Returns a individual user account
    patch:
      summary: Update user record
      operationId: patch-users-id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/500"
      description: Update the user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      tags:
        - user
    delete:
      summary: Delete a user
      operationId: delete-users-id
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Removes a user record
      tags:
        - user
components:
  schemas:
    Mooring:
      title: Mooring
      type: object
      examples:
        - id: string
          properties:
            number: string
            max_vessel_length: 0
            type: pole
            current_inspection: toBeConfirmed
            block_weight: 0
            price: string
            buoy_colour: string
            last_inspection: string
            next_inspection: string
            is_stern_tied: toBeConfirmed
            club_mooring: true
            depth:
              mean_high_water: 0
              mean_low_water_springs: 0
              mean_sea_level: 0
          location:
            bay: string
            island: string
            harbour: string
            region: string
            area: string
          Owner:
            id: string
            mooring_verified: string
            ownership_verified: verified
          geometry:
            type: string
            coordinates:
              - 0
      description: ""
      x-tags:
        - mooring
      properties:
        id:
          type: string
        properties:
          type: object
          properties:
            number:
              type: string
              readOnly: true
            max_vessel_length:
              type: number
            type:
              type: string
              enum:
                - pole
                - MM4 Swing Mooring
            current_inspection:
              enum:
                - toBeConfirmed
                - "yes"
                - "no"
              type: boolean
            block_weight:
              type: number
            price:
              type: string
            buoy_colour:
              type: string
            last_inspection:
              type: string
            next_inspection:
              type: string
            is_stern_tied:
              enum:
                - toBeConfirmed
                - "yes"
                - "no"
              type: boolean
            club_mooring:
              type: boolean
            depth:
              type: object
              properties:
                mean_high_water:
                  type: number
                mean_low_water_springs:
                  type: number
                mean_sea_level:
                  type: number
          required:
            - number
            - max_vessel_length
            - type
            - current_inspection
            - block_weight
            - price
            - depth
        location:
          type: object
          properties:
            bay:
              type: string
            island:
              type: string
            harbour:
              type: string
            region:
              type: string
            area:
              type: string
        Owner:
          type: object
          properties:
            id:
              type: string
            mooring_verified:
              type: string
            ownership_verified:
              type: string
              enum:
                - verified
                - submitted
                - notVerified
          required:
            - ownership_verified
        geometry:
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              readOnly: true
            coordinates:
              type: array
              items:
                type: number
              readOnly: true
          readOnly: true
      required:
        - location
        - geometry
    Owner:
      title: Owner
      type: object
      description: Mooring and marina berths owners data model
      examples:
        - id: string
          auth0: string
          moorings:
            - id: string
              number: string
              max_vessel_length: 0
              lower_water_depth: 0
              type_of: pole
              last_inspection_date: string
              block_weight: 0
              price: string
              location:
                name: string
                bay: string
                island: string
                harbour: string
                region: string
              geometry:
                type: string
                coordinates:
                  - 0
              Owner:
                id: string
                mooring_verified: string
          created_date: string
      x-tags:
        - owner
      properties:
        id:
          type: string
          readOnly: true
        auth0:
          type: string
        moorings:
          type: array
          items:
            $ref: "#/components/schemas/Mooring"
          readOnly: true
        created_date:
          type: string
          readOnly: true
      required:
        - id
        - auth0
    booking:
      type: object
      title: booking
      description: Mooring booking model
      examples:
        - id: string
          from: string
          to: string
          user_id: string
          created_date: string
          mooring:
            id: string
            number: string
            owner_id: string
      x-tags:
        - booking
      properties:
        id:
          type: string
          readOnly: true
        from:
          type: string
        to:
          type: string
        user_id:
          type: string
        created_date:
          type: string
          readOnly: true
        mooring:
          type: object
          required:
            - id
            - number
            - owner_id
          properties:
            id:
              type: string
            number:
              type: string
            owner_id:
              type: string
      required:
        - from
        - to
        - user_id
        - mooring
    User:
      title: User
      type: object
      description: Mooring user model
      x-tags:
        - user
      examples:
        - id: string
          name: string
          auth0: string
          bookings:
            - id: string
              from: string
              to: string
              user_id: string
              created_date: string
              mooring:
                id: string
                number: string
                owner_id: string
          created_date: string
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        auth0:
          type: string
          readOnly: true
        bookings:
          type: array
          items:
            $ref: "#/components/schemas/booking"
          readOnly: true
        created_date:
          type: string
          readOnly: true
      required:
        - name
        - created_date
  responses:
    "400":
      description: 400 Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Bad Request
                readOnly: true
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: 401 Unauthorized
                readOnly: true
    "404":
      description: 404 Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Not Found
                readOnly: true
    "500":
      description: 500 Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Internal Server Error
                readOnly: true
tags:
  - name: booking
  - name: mooring
  - name: owner
  - name: user
