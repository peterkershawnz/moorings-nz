openapi: 3.1.0
info:
  title: Moorings API
  version: "1.0"
  contact:
    name: Peter Kershaw
    email: p.kershaw4@gmail.com
  description: Moorings and marina berths marketplace API.
servers:
  - url: "http://localhost:5001"
paths:
  /moorings:
    get:
      summary: Get moorings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mooring"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-moorings
      description: Returns moorings based on location.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: number
            examples:
              example-1:
                value:
                  - 173.96973990960998
                  - -35.217635807305435
                  - 173.9786233858673
                  - -35.20473254052142
          application/xml:
            schema:
              type: object
              properties: {}
        description: |-
          Requires the latitude and longitude within the bounds of a rectangle. 

          The format is an array with bottom left coordinates then upper right coordinates [
              173.96973990960998, -35.217635807305435, 173.9786233858673, -35.20473254052142,
          ]
      parameters:
        - schema:
            type: boolean
          in: query
          name: available
          description: only show moorings available
        - schema:
            type: string
          in: query
          name: date
          description: only show available moorings on this date
      tags:
        - mooring
  "/moorings/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a single mooring
      tags:
        - mooring
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mooring"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-moorings-id
      description: Returns a individual mooring based on id.
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: mooring id
    patch:
      summary: Update mooring record
      operationId: patch-moorings-id
      responses:
        "200":
          description: 200 Mooring updated
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          description: 403 Forbidden
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Update a single mooring.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Mooring"
      parameters: []
      tags:
        - mooring
  /owners:
    post:
      summary: Create a owner
      operationId: post-owners
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"
        "400":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      description: Create a new owner record
      tags:
        - owner
  "/owners/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a single owner
      tags:
        - owner
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-owners-id
      description: Returns an individual mooring and marina berth owner based on id.
    patch:
      summary: Update owner record
      operationId: patch-owners-id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Update a single owner record
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Owner"
        description: ""
      tags:
        - owner
    delete:
      summary: Delete a owner
      operationId: delete-owners-id
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Removes a owner record
      tags:
        - owner
  /bookings:
    post:
      summary: Create a booking
      operationId: post-bookings
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/booking"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      description: Creates a booking of a mooring
      tags:
        - booking
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/booking"
  "/bookings/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a booking
      tags:
        - booking
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/booking"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-bookings-id
      description: Return the bookings for a single mooring
    delete:
      summary: Delete a booking
      operationId: delete-bookings-id
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Deletes a mooring booking
      tags:
        - booking
      parameters: []
  /users:
    post:
      summary: Create a user
      operationId: post-users
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - user
      description: Creates a new user record
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
  "/users/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get a user
      tags:
        - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: get-users-id
      description: Returns a individual user account
    patch:
      summary: Update user record
      operationId: patch-users-id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/500"
      description: Update the user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      tags:
        - user
    delete:
      summary: Delete a user
      operationId: delete-users-id
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      description: Removes a user record
      tags:
        - user
components:
  schemas:
    Mooring:
      title: Mooring
      type: object
      examples:
        - id: string
          number: string
          max_vessel_length: 0
          lower_water_depth: 0
          type_of: pole
          last_inspection_date: string
          block_weight: 0
          owner_id: string
          price: string
          location: string
          bay: string
          island: string
          geometry:
            type: string
            coordinates:
              - 0
      description: ""
      properties:
        id:
          type: string
          readOnly: true
        number:
          type: string
          readOnly: true
        max_vessel_length:
          type: number
        lower_water_depth:
          type: number
        type_of:
          type: string
          enum:
            - pole
            - swing
        last_inspection_date:
          type: string
        block_weight:
          type: number
        owner_id:
          type: string
        price:
          type: string
        location:
          type: string
        bay:
          type: string
        island:
          type: string
        geometry:
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              readOnly: true
            coordinates:
              type: array
              items:
                type: number
              readOnly: true
          readOnly: true
      required:
        - id
        - number
        - max_vessel_length
        - lower_water_depth
        - type_of
        - last_inspection_date
        - block_weight
        - location
        - geometry
      x-tags:
        - mooring
    Owner:
      title: Owner
      type: object
      description: Mooring and marina berths owners data model
      examples:
        - id: string
          auth0: string
          moorings:
            - string
          stripe_account: string
          stripe_status: details_enabled
          created_date: string
      properties:
        id:
          type: string
          readOnly: true
        auth0:
          type: string
        moorings:
          type: array
          items:
            type: string
        stripe_account:
          type: string
        stripe_status:
          type: string
          enum:
            - details_enabled
            - charges_enabled
            - not_started
        created_date:
          type: string
          readOnly: true
      required:
        - auth0
        - created_date
      x-tags:
        - owner
    booking:
      type: object
      title: booking
      description: Mooring booking model
      examples:
        - id: string
          start_date: string
          end_date: string
          user_id: string
          created_date: string
          mooring_id: string
          mooring_number: string
          mooring_owner_id: string
          "": string
      x-tags:
        - booking
      properties:
        id:
          type: string
          readOnly: true
        start_date:
          type: string
        end_date:
          type: string
        user_id:
          type: string
        created_date:
          type: string
          readOnly: true
        mooring_id:
          type: string
        mooring_number:
          type: string
        mooring_owner_id:
          type: string
      required:
        - start_date
        - end_date
        - user_id
        - created_date
        - mooring_id
        - mooring_number
        - mooring_owner_id
    User:
      title: User
      type: object
      description: Mooring user model
      x-tags:
        - user
      examples:
        - id: string
          auth0: string
          bookings:
            - string
          mooring_favorites:
            - string
          created_date: string
      properties:
        id:
          type: string
          readOnly: true
        auth0:
          type: string
          readOnly: true
        bookings:
          type: array
          items:
            type: string
        mooring_favorites:
          type: array
          items:
            type: string
        created_date:
          type: string
          readOnly: true
      required:
        - auth0
        - created_date
  responses:
    "400":
      description: 400 Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Bad Request
                readOnly: true
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: 401 Unauthorized
                readOnly: true
    "404":
      description: 404 Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Not Found
                readOnly: true
    "500":
      description: 500 Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Internal Server Error
                readOnly: true
tags:
  - name: booking
  - name: mooring
  - name: owner
  - name: user
